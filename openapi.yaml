openapi: "3.0.0"
info:
  # The protocol version is embedded in the code as constant in the
  # `mithril-common/src/lib.rs` file. If you plan to update it
  # here to reflect changes in the API, please also update the constant in the
  # Rust file.
  version: 0.1.6
  title: Mithril Aggregator Server
  description: |
    The REST API provided by a Mithril Aggregator Node in a Mithril network.

    You can play with it [here](https://mithril.network/openapi-ui/).
  termsOfService: http://swagger.io/terms/
  contact:
    name: Mithril Team
    url: https://github.com/input-output-hk/mithril
  license:
    name: BSD 3-Clause License
    url: https://github.com/input-output-hk/mithril/blob/main/LICENSE
servers:
  - url: https://aggregator.release-preprod.api.mithril.network/aggregator
  - url: https://aggregator.pre-release-preview.api.mithril.network/aggregator
  - url: https://aggregator.testing-preview.api.mithril.network/aggregator
  - url: http://localhost:8080/aggregator
paths:
  /epoch-settings:
    get:
      summary: Get current epoch settings
      description: |
        Returns the information related to the current epoch:
          * protocol parameters for current epoch
          * protocol parameters for next epoch (to setup cryptography, allowing signers to register)
      responses:
        "200":
          description: epoch settings found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EpochSettingsMessage"
        "412":
          description: API version mismatch
        default:
          description: epoch settings error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /certificate-pending:
    get:
      summary: Get current pending certificate information
      description: |
        Returns the information related to the current pending certificate:
          * protocol parameters, for current and next epoch (to setup cryptography)
          * beacon information (where on the chain the pending certificate should be triggered)
          * entity type of the message that must be signed
          * verification keys of the signers, for current and next epoch
      responses:
        "200":
          description: pending certificate found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificatePendingMessage"
        "204":
          description: no pending certificate available
        "412":
          description: API version mismatch
        default:
          description: pending certificate error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /certificates:
    get:
      summary: Get most recent certificates
      description: |
        Returns the list of the most recent certificates
      responses:
        "200":
          description: certificates found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateListMessage"
        "412":
          description: API version mismatch
        default:
          description: certificates retrieval error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /certificate/{certificate_hash}:
    get:
      summary: Get certificate by hash
      description: |
        Returns the certificate identified by its hash
      parameters:
        - name: certificate_hash
          in: path
          description: Hash of the certificate to retrieve
          required: true
          schema:
            type: string
            format: bytes
          example: "AsB0vSvijo8FIfrGFwBtdCNQVhBc9P24qQwKgWw4mr5kRZL"
      responses:
        "200":
          description: certificate found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateMessage"
        "404":
          description: certificate not found
        "412":
          description: API version mismatch
        default:
          description: pending certificate error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /artifact/snapshots:
    get:
      summary: Get most recent snapshots
      description: |
        Returns the list of the most recent snapshots
      responses:
        "200":
          description: snapshots found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotListMessage"
        "412":
          description: API version mismatch
        default:
          description: snapshots retrieval error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /artifact/snapshot/{digest}:
    get:
      summary: Get snapshot information
      description: |
        Returns the information of a snapshot and where to retrieve its binary content
      parameters:
        - name: digest
          in: path
          description: Digest of the snapshot to retrieve
          required: true
          schema:
            type: string
            format: bytes
          example: "NQVhBc9frGFwBtdCKgWw4P24qQwAsB0vSvijo8FImr5kRZL"
      responses:
        "200":
          description: snapshot found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotMessage"
        "404":
          description: snapshot not found
        "412":
          description: API version mismatch
        default:
          description: snapshot retrieval error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /artifact/snapshot/{digest}/download:
    get:
      summary: Download the snapshot
      description: |
        Returns the snapshot archive binary content
      parameters:
        - name: digest
          in: path
          description: Digest of the snapshot to download
          required: true
          schema:
            type: string
            format: bytes
          example: "NQVhBc9frGFwBtdCKgWw4P24qQwAsB0vSvijo8FImr5kRZL"
      responses:
        "200":
          description: snapshot found
          content:
            application/gzip:
              schema:
                type: string
                format: binary
        "404":
          description: snapshot not found
        "412":
          description: API version mismatch
        default:
          description: snapshot retrieval error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /artifact/mithril-stake-distributions:
    get:
      summary: Get most recent Mithril stake distributions
      description: |
        Returns the list of the most recent Mithril stake distributions
      responses:
        "200":
          description: Mithril stake distribution found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MithrilStakeDistributionListMessage"
        "412":
          description: API version mismatch
        default:
          description: Mithril stake distribution retrieval error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /artifact/mithril-stake-distribution/{hash}:
    get:
      summary: Get Mithril stake distribution information
      description: |
        Returns the information of a Mithril stake distribution
      parameters:
        - name: hash
          in: path
          description: Hash of the Mithril stake distribution to retrieve
          required: true
          schema:
            type: string
            format: bytes
          example: "NQVhBc9frGFwBtdCKgWw4P24qQwAsB0vSvijo8FImr5kRZL"
      responses:
        "200":
          description: Mithril stake distribution found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MithrilStakeDistributionMessage"
        "404":
          description: Mithril stake distribution not found
        "412":
          description: API version mismatch
        default:
          description: Mithril stake distribution retrieval error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /register-signer:
    post:
      summary: Registers signer
      description: |
        Registers a signer for the next certificate production
      requestBody:
        description: Signer information to register
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterSignerMessage"
      responses:
        "201":
          description: signer registration succeeded
        "400":
          description: signer registration bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "412":
          description: API version mismatch
        default:
          description: signer registration error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /register-signatures:
    post:
      summary: Registers signatures
      description: |
        Registers the single signatures from a signer participant for the pending certificate
      requestBody:
        description: List of signatures
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterSingleSignatureMessage"
      responses:
        "201":
          description: signatures registration succeeded
        "400":
          description: signatures registration bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: open message not found
        "410":
          description: signatures registration done too late
        "412":
          description: API version mismatch
        default:
          description: signatures registration error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    EpochSettingsMessage:
      description: Epoch settings
      type: object
      additionalProperties: false
      required:
        - epoch
        - protocol
        - next_protocol
      properties:
        epoch:
          description: Cardano chain epoch number
          type: integer
          format: int64
        protocol:
          $ref: "#/components/schemas/ProtocolParameters"
        next_protocol:
          $ref: "#/components/schemas/ProtocolParameters"
      example: 
        { 
          "epoch": 329,
          "protocol": { "k": 857, "m": 6172, "phi_f": 0.2 },
          "next_protocol": { "k": 2422, "m": 20973, "phi_f": 0.2 }
        }
    ProtocolParameters:
      description: Protocol cryptographic parameters
      type: object
      additionalProperties: true
      required:
        - k
        - m
        - phi_f
      properties:
        k:
          description: Quorum parameter
          type: integer
          format: int64
        m:
          description: Security parameter (number of lotteries)
          type: integer
          format: int64
        phi_f:
          description: f in phi(w) = 1 - (1 - f)^w, where w is the stake of a participant
          type: number
          format: double
      example: { "k": 857, "m": 6172, "phi_f": 0.2 }

    Beacon:
      description: Beacon represents a point in the Cardano chain at which a Mithril certificate should be produced
      type: object
      additionalProperties: true
      required:
        - network
        - epoch
        - immutable_file_number
      properties:
        network:
          description: Cardano network
          type: string
        epoch:
          description: Cardano chain epoch number
          type: integer
          format: int64
        immutable_file_number:
          description: Number of the last immutable file that should be included the snapshot
          type: integer
          format: int64
      example:
        { "network": "mainnet", "epoch": 329, "immutable_file_number": 7060000 }

    SignedEntityType:
      description: Entity type of the message that is signed
      type: object
      additionalProperties: true   

    CertificatePendingMessage:
      description: CertificatePendingMessage represents all the information related to the certificate currently expecting to receive quorum of single signatures
      type: object
      additionalProperties: false
      required:
        - beacon
        - entity_type
        - protocol
        - next_protocol
        - signers
        - next_signers
      properties:
        beacon:
          $ref: "#/components/schemas/Beacon"
        entity_type:
          $ref: "#/components/schemas/SignedEntityType"
        protocol:
          $ref: "#/components/schemas/ProtocolParameters"
        next_protocol:
          $ref: "#/components/schemas/ProtocolParameters"
        signers:
          type: array
          items:
            $ref: "#/components/schemas/Signer"
        next_signers:
          type: array
          items:
            $ref: "#/components/schemas/Signer"

    Stake:
      description: Stake represents the stakes of a participant in the Cardano chain
      type: object
      additionalProperties: true
      required:
        - stake
      properties:
        stake:
          description: Stake share as computed in the 'stake distribution' by the Cardano Node, multiplied by a billion (1.0e9)
          type: integer
          format: int64
      example: { "stake": "1234" }

    Signer:
      description: Signer represents a signing participant in the network
      type: object
      additionalProperties: true
      required:
        - party_id
        - verification_key
      properties:
        party_id:
          description: The unique identifier of the signer
          type: string
        verification_key:
          description: The public key used to authenticate signer signature
          type: string
          format: byte
        verification_key_signature:
          description: The signature of the verification_key (signed by the Cardano node KES secret key)
          type: string
          format: byte
        operational_certificate:
          description: The operational certificate of the stake pool operator attached to the signer node
          type: string
          format: byte
        kes_period:
          description: The number of updates of the KES secret key that signed the verification key
          type: integer
          format: int64
      example:
        {
          "party_id": "1234567890",
          "verification_key": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
          "verification_key_signature": "wBtdCNQZL+IUA9XXuAsB0vB0vSvijo8FIfrG/FSvijo8FIfrG/FwBtdCNQ7RiCHSRem3MmHo",
          "operational_certificate": "AsB0vSv4qQwKgWw4mem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mrr5kRZL+IUA9XXu7RiCHSR5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ+IvVzKLgmaLiyb+xyV6Npbxvu+Rem3MmHoKbo",
          "kes_period": 123,
        }

    RegisterSignerMessage:
      description: This message represents a signing participant in the network.
      additionalProperties: true
      properties:
        epoch:
          description: Cardano chain epoch number
          type: integer
          format: int64
      allOf:
        - $ref: "#/components/schemas/Signer"

    SignerWithStake:
      description: Signer represents a signing party in the network (including its stakes)
      additionalProperties: true
      allOf:
        - $ref: "#/components/schemas/Signer"
        - $ref: "#/components/schemas/Stake"

    RegisterSingleSignatureMessage:
      description: |
          This message holds a Signer Single Signature with the
          list of won indexes in the lottery.
      type: object
      additionalProperties: false
      required:
        - entity_type
        - party_id
        - signature
        - indexes
      properties:
        entity_type:
          $ref: "#/components/schemas/SignedEntityType"
        party_id:
          description: The unique identifier of the signer
          type: string
        signature:
          description: The single signature of the digest
          type: string
          format: byte
        indexes:
          description: The indexes of the lottery won that lead to the single signature
          type: array
          items:
            type: integer
            format: int64
      example:
        {
          "party_id": "1234567890",
          "index": 25,
          "signature": "VhBc9P24qQwKgWw4mr5kRAsB0vSvijo8FIfrG/FwBtdCNQZL+IUA9XXuAsB0vSvijo8FIfrG/FwBtdCNQ7RiCHSRem3MmHoKbo",
        }

    ProtocolMessageParts:
      description: ProtocolMessage represents a message that is signed (or verified) by the Mithril protocol
      type: object
      additionalProperties: true
      required:
        - snapshot_digest
        - next_aggregate_verification_key
      properties:
        snapshot_digest:
          description: Digest of the snapshot archive
          type: string
          format: bytes
        next_aggregate_verification_key:
          description: Aggregate verification key (AVK) that will be used to create the next multi signature
          type: string
          format: bytes
      example:
        {
          "snapshot_digest": "XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mr5kRZL+I",
          "next_aggregate_verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ+IvVzKLgmaLiyb+xyV6Npbxvu+KhLuxU7R7q3JUmOkESHoro6N",
        }

    ProtocolMessage:
      description: ProtocolMessage represents a message that is signed (or verified) by the Mithril protocol
      type: object
      additionalProperties: false
      required:
        - message_parts
      properties:
        message_parts:
          $ref: "#/components/schemas/ProtocolMessageParts"
      example:
        {
          "snapshot_digest": "XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mr5kRZL+I",
          "next_aggregate_verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ+IvVzKLgmaLiyb+xyV6Npbxvu+KhLuxU7R7q3JUmOkESHoro6N",
        }

    CertificateListItemMessageMetadata:
      description: CertificateListItemMessageMetadata represents the metadata associated to a CertificateListItemMessage
      type: object
      additionalProperties: false
      required:
        - version
        - parameters
        - initiated_at
        - sealed_at
        - total_signers
      properties:
        version:
          description: Version of the protocol
          type: string
          format: bytes
        parameters:
          $ref: "#/components/schemas/ProtocolParameters"
        initiated_at:
          description: Date and time at which the certificate was initialized and ready to accept single signatures from signers
          type: string
          format: date-time
        sealed_at:
          description: Date and time at which the certificate was sealed (when the quorum of single signatures was reached so that a multi signature could be aggregated from them)
          type: string
          format: date-time
        total_signers:
          description: The number of the signers with their stakes and verification keys
          type: integer
          format: int64
      example:
        {
          "version": "0.1.0",
          "parameters": { "k": 5, "m": 100, "phi_f": 0.65 },
          "initiated_at": "2022-07-17T18:51:23.192811338Z",
          "sealed_at": "2022-07-17T18:51:35.830832580Z",
          "total_signers": 3,
        }

    CertificateListMessage:
      description: CertificateListMessage represents a list of Mithril certificates
      type: array
      items:
        $ref: "#/components/schemas/CertificateListItemMessage"

    CertificateListItemMessage:
      description: CertificateListItemMessage represents an item of a list of Mithril certificates
      type: object
      additionalProperties: false
      required:
        - hash
        - previous_hash
        - beacon
        - metadata
        - protocol_message
        - signed_message
        - aggregate_verification_key
      properties:
        hash:
          description: Hash of the current certificate
          type: string
          format: bytes
        previous_hash:
          description: Hash of the previous certificate
          type: string
          format: bytes
        beacon:
          $ref: "#/components/schemas/Beacon"
        metadata:
          $ref: "#/components/schemas/CertificateListItemMessageMetadata"
        protocol_message:
          description: Protocol message
          $ref: "#/components/schemas/ProtocolMessage"
        signed_message:
          description: Hash of the protocol message that is signed by the signer participants
          type: string
          format: bytes
        aggregate_verification_key:
          description: Aggregate verification key used to verify the multi signature
          type: string
          format: bytes
      example:
        {
          "hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
          "previous_hash": "wKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ",
          "beacon":
            {
              "network": "mainnet",
              "epoch": 329,
              "immutable_file_number": 7060000,
            },
          "metadata":
            {
              "version": "0.1.0",
              "parameters": { "k": 5, "m": 100, "phi_f": 0.65 },
              "initiated_at": "2022-07-17T18:51:23.192811338Z",
              "sealed_at": "2022-07-17T18:51:35.830832580Z",
              "signers": 3
            },
          "protocol_message":
            {
              "message_parts":
                {
                  "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
                  "next_aggregate_verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ",
                },
            },
          "signed_message": "24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
          "aggregate_verification_key": "NQVhBc9P24tdCwKgWw4mr5kRZL+IUSRem3MmHoKboAsB0vSvijo8FIfrG/FwBoAsB0vSvijo8FA9XXu7RiCHSRem3MmHoKbqQwKgWw4mr5kRZL+IUA9XXu7RiCHIfrG/FwBtdCNQVhBc9P24qQ"
        }

    CertificateMetadata:
      description: CertificateMetadata represents the metadata associated to a Certificate
      type: object
      additionalProperties: false
      required:
        - version
        - parameters
        - initiated_at
        - sealed_at
        - signers
      properties:
        version:
          description: Version of the protocol
          type: string
          format: bytes
        parameters:
          $ref: "#/components/schemas/ProtocolParameters"
        initiated_at:
          description: Date and time at which the certificate was initialized and ready to accept single signatures from signers
          type: string
          format: date-time
        sealed_at:
          description: Date and time at which the certificate was sealed (when the quorum of single signatures was reached so that a multi signature could be aggregated from them)
          type: string
          format: date-time
        signers:
          description: The list of the signers with their stakes and verification keys
          type: array
          items:
            $ref: "#/components/schemas/SignerWithStake"
      example:
        {
          "version": "0.1.0",
          "parameters": { "k": 5, "m": 100, "phi_f": 0.65 },
          "initiated_at": "2022-07-17T18:51:23.192811338Z",
          "sealed_at": "2022-07-17T18:51:35.830832580Z",
          "signers":
            [
              {
                "party_id": "1234567890",
                "verification_key": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
                "stake": "1234",
              },
              {
                "party_id": "2345678900",
                "verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdC",
                "stake": "2345",
              },
            ],
        }

    CertificateMessage:
      description: Certificate represents a Mithril certificate embedding a Mithril STM multi signature
      type: object
      additionalProperties: false
      required:
        - hash
        - previous_hash
        - beacon
        - metadata
        - protocol_message
        - signed_message
        - aggregate_verification_key
        - multi_signature
        - genesis_signature
      properties:
        hash:
          description: Hash of the current certificate
          type: string
          format: bytes
        previous_hash:
          description: Hash of the previous certificate
          type: string
          format: bytes
        beacon:
          $ref: "#/components/schemas/Beacon"
        metadata:
          $ref: "#/components/schemas/CertificateMetadata"
        protocol_message:
          description: Protocol message
          $ref: "#/components/schemas/ProtocolMessage"
        signed_message:
          description: Hash of the protocol message that is signed by the signer participants
          type: string
          format: bytes
        aggregate_verification_key:
          description: Aggregate verification key used to verify the multi signature
          type: string
          format: bytes
        multi_signature:
          description: STM multi signature created from a quorum of single signatures from the signers
          type: string
          format: bytes
        genesis_signature:
          description: Genesis signature created to bootstrap the certificate chain with the Cardano Genesis Keys
          type: string
          format: bytes
      example:
        {
          "hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
          "previous_hash": "wKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ",
          "beacon":
            {
              "network": "mainnet",
              "epoch": 329,
              "immutable_file_number": 7060000,
            },
          "metadata":
            {
              "version": "0.1.0",
              "parameters": { "k": 5, "m": 100, "phi_f": 0.65 },
              "initiated_at": "2022-07-17T18:51:23.192811338Z",
              "sealed_at": "2022-07-17T18:51:35.830832580Z",
              "signers":
                [
                  {
                    "party_id": "1234567890",
                    "verification_key": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
                    "stake": "1234",
                  },
                  {
                    "party_id": "2345678900",
                    "verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdC",
                    "stake": "2345",
                  },
                ],
            },
          "protocol_message":
            {
              "message_parts":
                {
                  "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
                  "next_aggregate_verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ",
                },
            },
          "signed_message": "24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
          "aggregate_verification_key": "NQVhBc9P24tdCwKgWw4mr5kRZL+IUSRem3MmHoKboAsB0vSvijo8FIfrG/FwBoAsB0vSvijo8FA9XXu7RiCHSRem3MmHoKbqQwKgWw4mr5kRZL+IUA9XXu7RiCHIfrG/FwBtdCNQVhBc9P24qQ",
          "multi_signature": "",
          "genesis_signature": "",
        }

    SnapshotListMessage:
      description: SnapshotListMessage represents a list of snapshots
      type: array
      items:
        $ref: "#/components/schemas/Snapshot"

    Snapshot:
      description: Snapshot represents a snapshot file and its metadata
      type: object
      additionalProperties: false
      required:
        - digest
        - beacon
        - certificate_hash
        - size
        - created_at
        - locations
      properties:
        digest:
          description: Digest that is signed by the signer participants
          type: string
          format: bytes
        beacon:
          $ref: "#/components/schemas/Beacon"
        certificate_hash:
          description: Hash of the associated certificate
          type: string
          format: bytes
        size:
          description: Size of the snapshot file in Bytes
          type: integer
          format: int64
        created_at:
          description: Date and time at which the snapshot was created
          type: string
          format: date-time
        locations:
          description: Locations where the binary content of the snapshot can be retrieved
          type: array
          items:
            type: string
      example:
        {
          "digest": "24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
          "beacon":
            {
              "network": "mainnet",
              "epoch": 329,
              "immutable_file_number": 7060000,
            },
          "certificate_hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
          "size": 26058531636,
          "created_at": "2022-07-21T17:32:28Z",
          "locations":
            [
              "https://mithril-cdn-us.iohk.io/snapshot/24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
              "https://mithril-cdn-eu.iohk.io/snapshot/24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
              "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C",
              "ipfs:QmPXME1oRtoT627YKaDPDQ3PwA8tdP9rWuAAweLzqSwAWT",
            ],
        }

    SnapshotMessage:
      description: This message represents a snapshot file and its metadata.
      allOf:
        - $ref: "#/components/schemas/Snapshot"

    MithrilStakeDistributionListMessage:
      description: MithrilStakeDistributionListMessage represents a list of Mithril stake distribution
      type: array
      items:
        type: object
        additionalProperties: false
        required:
          - epoch
          - hash
        properties:
          epoch:
            description: Cardano chain epoch number
            type: integer
            format: int64
          hash:
            description: Hash of the Mithril stake distribution
            type: string
            format: bytes
          certificate_hash:
            description: Hash of the associated certificate
            type: string
            format: bytes
        example:
          {
          "epoch": 123,
          "hash":"24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
          "certificate_hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo"
          }

    MithrilStakeDistributionMessage:
      description: This message represents a Mithril stake distribution.
      type: object
      additionalProperties: false
      required:
        - epoch
        - hash
        - signers
      properties:
        epoch:
          description: Cardano chain epoch number
          type: integer
          format: int64
        hash:
          description: Hash of the Mithril stake distribution
          type: string
          format: bytes
        certificate_hash:
          description: Hash of the associated certificate
          type: string
          format: bytes
        signers:
          description: The list of the signers with their stakes and verification keys
          type: array
          items:
            $ref: "#/components/schemas/SignerWithStake"
      example:
        {
        "epoch": 123,
        "hash":"24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
        "certificate_hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
        "signers":
            [
              {
                "party_id": "1234567890",
                "verification_key": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
                "stake": "1234",
              },
              {
                "party_id": "2345678900",
                "verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdC",
                "stake": "2345",
              },
            ],
        }

    Error:
      description: Internal error representation
      type: object
      additionalProperties: false
      required:
        - message
      properties:
        label:
          description: optional label
          type: string
        message:
          description: error message
          type: string
          example: "An error occurred, the operation could not be completed"
